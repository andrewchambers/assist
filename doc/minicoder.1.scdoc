minicoder(1)

# NAME

minicoder - AI-powered assistant for automating tasks on your machine.

# SYNOPSIS

*minicoder* [_options_] <_request_>

# DESCRIPTION

*minicoder* is a local AI-powered assistant that helps with coding, system administration, data analysis, and other tasks. It works iteratively, executing commands through a controlled shell environment while maintaining focus on specific files.

The assistant can read files, execute shell commands, track changes, and perform complex multi-step tasks autonomously until the task is complete or the iteration limit is reached.

# OPTIONS

*--debug*
	Show debug output including the prompts sent to the AI model.

*--max-iterations* _NUM_
	Set the maximum number of iterations the assistant will perform (default: 50).

*--model* _MODEL_
	Specify which AI model to use. Overrides the MINICODER_MODEL environment variable. If neither is specified, the first available model from the configuration is used.

*--files* _FILES_
	Files or glob patterns to include initially (space-separated).

*--extra-instructions* _TEXT_
	Provide custom instructions to guide the assistant's behavior. Can be inline text or @filename to load from a file. Takes precedence over MINICODER_EXTRA_INSTRUCTIONS environment variable.

*--help*, *-h*
	Display help message and exit.

# ENVIRONMENT

*MINICODER_MODEL_CONFIG*
	Path to a custom model configuration file. If not set, built-in defaults are used based on available API keys.

*MINICODER_MODEL*
	Specify the default model to use. This overrides the default model selection but can still be overridden by the --model command line option.

*MINICODER_EXTRA_INSTRUCTIONS*
	Custom instructions to guide the assistant's behavior. Can be inline text or @filename to load from a file. The --extra-instructions command line option takes precedence over this variable.

*OPENROUTER_API_KEY*
	API key for OpenRouter service. When set, enables models from multiple providers including OpenAI, Google, X.AI, DeepSeek, and Anthropic.

*OPENAI_API_KEY*
	API key for OpenAI services. When set without OPENROUTER_API_KEY, enables OpenAI models directly.

*GEMINI_API_KEY*
	API key for Google Gemini. When set without OPENROUTER_API_KEY, enables Google Gemini models directly.

*XAI_API_KEY*
	API key for X.AI. When set without OPENROUTER_API_KEY, enables Grok models directly.


# CONFIGURATION

*minicoder* can be configured to use different AI models and endpoints through a configuration file specified by the MINICODER_MODEL_CONFIG environment variable. If no configuration file is specified, the tool will use default models based on available API keys.

For detailed information about configuring models, including file format, available parameters, and examples, see *minicoder-model-config*(5).

# EXIT STATUS

*0*
	Task completed successfully.

*1*
	Task failed, was aborted, or an error occurred.

# EXAMPLES

Request help with a coding task:
	$ minicoder "Fix the memory leak in util.c"

Use a specific model with debug output:
	$ minicoder --model gemini --debug "Add error handling to the parser"

Include specific files for the task:
	$ minicoder --files "src/*.c src/*.h" "Refactor the authentication module"

Use a specific model with reasoning capabilities:
	$ minicoder --model o3 "Optimize the database queries"

Load custom instructions from a file:
	$ minicoder --extra-instructions "@project-guidelines.md" "Add a new feature"

Set persistent instructions via environment:
	$ export MINICODER_EXTRA_INSTRUCTIONS="Always follow ESLint rules and write tests"
	$ minicoder "Fix the validation bug"

# SEE ALSO

*minicoder-model-config*(5)

# AUTHORS

Maintained by the minicoder project contributors.